package lk.ijse.gdse71.serenitymentalhealththerapycentersystem.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.BOFactory;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.PatientBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.PaymentBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.ProgramBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.TherapySessionBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.PatientBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.PaymentBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.ProgramBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.TherapySessionBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.PaymentDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapistDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapyProgramDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapySessionDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.PaymentTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapistTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapyProgramTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapySessionTM;

import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

public class PaymentController implements Initializable {

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnInvoice;

    @FXML
    private Button btnReset;

    @FXML
    private Button btnSave;

    @FXML
    private Button btnUpdate;

    @FXML
    private TableColumn<PaymentTM, Double> colAmount;

    @FXML
    private TableColumn<PaymentTM, LocalDate> colDate;

    @FXML
    private TableColumn<PaymentTM, String> colDesc;

    @FXML
    private TableColumn<PaymentTM, String> colPatientName;

    @FXML
    private TableColumn<PaymentTM, String> colPaymentId;

    @FXML
    private TableColumn<PaymentTM, String> colProgram;

    @FXML
    private TableColumn<PaymentTM, Double> colRemainingAmount;

    @FXML
    private TableColumn<PaymentTM, String> colSessionId;

    @FXML
    private TableColumn<PaymentTM, String> colStatus;

    @FXML
    private Label lblAmount;

    @FXML
    private Label lblAutoGeneratedId;

    @FXML
    private Label lblDate;

    @FXML
    private Label lblDesc;

    @FXML
    private Label lblName;

    @FXML
    private Label lblProgram;

    @FXML
    private Label lblRemainingAmount;

    @FXML
    private Label lblSessionId;

    @FXML
    private AnchorPane paymentAnchorPane;

    @FXML
    private TableView<PaymentTM> paymentTable;

    @FXML
    private RadioButton rdbDone;

    @FXML
    private RadioButton rdbOngoing;

    @FXML
    private TextField txtRemainingAmount;

    @FXML
    private TextField txtSearch;

    PaymentBO paymentBO = (PaymentBO) BOFactory.getBOFactory().getBO(BOFactory.BOTypes.PAYMENT);
    TherapySessionBO therapySessionBO = (TherapySessionBO) BOFactory.getBOFactory().getBO(BOFactory.BOTypes.THERAPYSESSION);
    PatientBO patientBO = (PatientBO) BOFactory.getBOFactory().getBO(BOFactory.BOTypes.PATIENT);
    ProgramBO programBO = (ProgramBO) BOFactory.getBOFactory().getBO(BOFactory.BOTypes.PROGRAM);

    @FXML
    void deleteBtnOnAction(ActionEvent event) {
        String paymentId = lblAutoGeneratedId.getText();

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to delete this Payment?", ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> optionalButtonType = alert.showAndWait();

        if(optionalButtonType.isPresent() && optionalButtonType.get() == ButtonType.YES) {
            boolean isDeleted = paymentBO.deletePayment(paymentId);
            if(isDeleted) {
                refreshPage();
                new Alert(Alert.AlertType.INFORMATION, "Payment deleted Successfully").show();
            }else{
                new Alert(Alert.AlertType.ERROR, "Failed to delete payment").show();
            }
        }
    }

    @FXML
    void resetBtnOnAction(ActionEvent event) {
        refreshPage();
    }

    @FXML
    void showInvoiceOnAction(ActionEvent event) {

    }

    @FXML
    void updateBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String name = lblName.getText();
        String program = lblProgram.getText();
        String sessionId = lblSessionId.getText();
        String remaining = txtRemainingAmount.getText();
        String date = lblDate.getText();
        String desc = lblDesc.getText();
        String amount = lblAmount.getText();
        String status = rdbOngoing.isSelected() ? "Ongoing" : "Completed";

        double paymentAmount = -1;
        paymentAmount = Double.parseDouble(amount);

        double remainingAmount = -1;
        remainingAmount = Double.parseDouble(remaining);

        LocalDate selectedDate = LocalDate.parse(date);

        boolean isUpdated = paymentBO.paymentUpdate(new PaymentDTO(id , selectedDate , paymentAmount , remainingAmount , status , sessionId));
        if (isUpdated) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Payment updated successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to update payment!").show();
        }
    }

    @FXML
    void selectCompleted(ActionEvent event) {
        rdbOngoing.setSelected(false);
    }

    @FXML
    void selectOngoing(ActionEvent event) {
        rdbDone.setSelected(false);
    }



    @FXML
    void clickedTable(MouseEvent event) {
        PaymentTM paymentTM = paymentTable.getSelectionModel().getSelectedItem();
        if(paymentTM != null) {
            lblAutoGeneratedId.setText(paymentTM.getId());
            lblSessionId.setText(paymentTM.getSessionId());
            lblName.setText(paymentTM.getPatientName());
            lblProgram.setText(paymentTM.getProgram());
            lblDesc.setText(paymentTM.getDescription());
            lblDate.setText(String.valueOf(paymentTM.getDate()));
            lblAmount.setText(String.valueOf(paymentTM.getAmount()));
            txtRemainingAmount.setText(String.valueOf(paymentTM.getRemainingAmount()));

            if(paymentTM.getStatus().equalsIgnoreCase("Ongoing")){
                rdbOngoing.setSelected(true);
                rdbDone.setSelected(false);
            }else{
                rdbDone.setSelected(true);
                rdbOngoing.setSelected(false);
            }

        }

        btnDelete.setDisable(false);
        btnUpdate.setDisable(false);
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        colPaymentId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colSessionId.setCellValueFactory(new PropertyValueFactory<>("sessionId"));
        colPatientName.setCellValueFactory(new PropertyValueFactory<>("patientName"));
        colProgram.setCellValueFactory(new PropertyValueFactory<>("program"));
        colDesc.setCellValueFactory(new PropertyValueFactory<>("description"));
        colDate.setCellValueFactory(new PropertyValueFactory<>("date"));
        colAmount.setCellValueFactory(new PropertyValueFactory<>("amount"));
        colRemainingAmount.setCellValueFactory(new PropertyValueFactory<>("remainingAmount"));
        colStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        String defaultStyle = "-fx-border-color: yellow; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtRemainingAmount.setStyle(defaultStyle);

        lblAmount.setText("");
        lblAutoGeneratedId.setText("");
        lblSessionId.setText("");
        lblName.setText("");
        lblProgram.setText("");
        lblDate.setText("");
        lblDesc.setText("");

        rdbDone.setSelected(false);
        rdbOngoing.setSelected(false);


        txtSearch.setOnAction(event -> {
            try {
                searchPayment();
            } catch (Exception e) {
                e.printStackTrace();
                new Alert(Alert.AlertType.ERROR, "Error searching payment").show();
            }
        });

        try {
            refreshPage();

        } catch (Exception e) {
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load payment id").show();
        }

    }

    private void searchPayment() {
        String searchText = txtSearch.getText().trim();

        paymentBO.searchPayment(searchText);

        if(searchText.isEmpty()){
            loadTableData();
            return;
        }
        List<PaymentDTO> paymentDTOS = paymentBO.searchPayment(searchText);
        ObservableList<PaymentTM> paymentTMS = FXCollections.observableArrayList();

        for(PaymentDTO paymentDTO : paymentDTOS){

            String sessionId = paymentDTO.getSessionId();
            String patientName = therapySessionBO.getPatientNameBySessionId(sessionId);
            String program = therapySessionBO.getProgramNameBySessionId(sessionId);
            String  desc = therapySessionBO.getDescriptionBySessionId(sessionId);

            PaymentTM paymentTM = new PaymentTM(
                   paymentDTO.getId(),
                    sessionId,
                    patientName,
                    program,
                    desc,
                    paymentDTO.getDate(),
                    paymentDTO.getAmount(),
                    paymentDTO.getRemainingAmount(),
                    paymentDTO.getStatus()
            );
            paymentTMS.add(paymentTM);
        }
        paymentTable.setItems(paymentTMS);
    }

    private void refreshPage() {
        loadTableData();

        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);

        txtRemainingAmount.setText("");

        String defaultStyle = "-fx-border-color: yellow; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtRemainingAmount.setStyle(defaultStyle);

    }

    private void loadTableData() {
        ArrayList<PaymentDTO> paymentDTOS = paymentBO.getAllPayments();
        ObservableList<PaymentTM> paymentTMS = FXCollections.observableArrayList();

        for (PaymentDTO paymentDTO : paymentDTOS) {
            TherapySessionDTO sessionDTO = therapySessionBO.getSessionById(paymentDTO.getSessionId());
            String patientName = null;
            String program = null;
            String desc = null;

            if (sessionDTO != null) {
                patientName = patientBO.getPatientNameById(sessionDTO.getPatientId());
                program = programBO.getProgramNameById(sessionDTO.getProgramId());
                desc = sessionDTO.getDescription();

                System.out.println(patientName);
                System.out.println(program);
                System.out.println(desc);
            }

            if (patientName == null) {
                patientName = "Unknown Patient";
            }

            PaymentTM paymentTM = new PaymentTM(
                    paymentDTO.getId(),
                    paymentDTO.getSessionId(),
                    patientName,
                    program,
                    desc,
                    paymentDTO.getDate(),
                    paymentDTO.getAmount(),
                    paymentDTO.getRemainingAmount(),
                    paymentDTO.getStatus()

            );
            paymentTMS.add(paymentTM);
        }
        paymentTable.setItems(paymentTMS);
    }
}
